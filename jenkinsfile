/*****************************************************************
    // Project3 backend
    ******************************************************************/
    pipeline {

        environment {
            registry = "garrydevops/test"
            registryCredential = 'dockerhub'
            dockerImage = ''
        }

        agent any
        stages {
                // stage('Cloning  BitBucket') {
                //     steps {
                //     git 'git@github.com:naistangz/Docker_Jenkins_Pipeline.git'
                //     }
                // }

                stage('Building Docker Image'){
                    steps {
                        sh 'pwd'
                        sh 'ls'
                        script {
                            dockerImage = docker.build registry + ":$BUILD_NUMBER"
                        }
                    }
                }

                stage('Deploying Docker Image to Dockerhub'){
                    steps {
                        script {
                            docker.withRegistry('', registryCredential) {
                            dockerImage.push()
                            }
                        }
                    }
                }

                stage('Cleaning Up'){
                    steps{
                    sh "docker rmi --force $registry:$BUILD_NUMBER"
                    }
                }

                stage('ssh ec2'){
                    steps{
                        sshagent(credentials: ['sshec2']) {
                    sh '''
                        
                        ssh -o StrictHostKeyChecking=no -l ec2-user 54.79.179.18 cd project3
                        ssh -o StrictHostKeyChecking=no -l ec2-user 54.79.179.18 docker pull image garrydevops/test
                        ssh -o StrictHostKeyChecking=no -l ec2-user 54.79.179.18 docker run --name myweb -p 80:3000 -d --restart=always garrydevops/test
                        
                        
                       '''
                        }

                    }
                }                  
    }
}


